import path from "path";
import { RuneServer } from "../server/server";
import { HotReloadServer } from "./hot-reload";
import { FileWatcher } from "./file-watcher";

export interface DevServerOptions {
  port?: number;
  host?: string;
  pagesDir?: string;
  apiDir?: string;
  publicDir?: string;
  dev?: boolean;
  hotReloadPort?: number;
}

export async function startDevServer(options: DevServerOptions = {}) {
  const config = {
    port: 3000,
    host: "localhost",
    dev: true,
    hotReloadPort: 3001,
    pagesDir: path.join(process.cwd(), "src/pages"),
    apiDir: path.join(process.cwd(), "src/api"),
    publicDir: path.join(process.cwd(), "public"),
    ...options,
  };

  console.log("üöÄ Starting Rune development server...");
  console.log(`üìÅ Pages: ${config.pagesDir}`);
  console.log(`üîß API: ${config.apiDir}`);
  console.log(`üì¶ Public: ${config.publicDir}`);

  // Hot Reload ÏÑúÎ≤Ñ Î®ºÏ†Ä ÏãúÏûë
  const hotReloadServer = new HotReloadServer({
    port: config.hotReloadPort,
  });

  try {
    await hotReloadServer.start();
    const actualHotReloadPort = hotReloadServer.getPort();

    // ÏÑúÎ≤Ñ ÏÉùÏÑ± Ïãú Ïã§Ï†ú hot reload Ìè¨Ìä∏ Ï†ÑÎã¨
    const server = new RuneServer({
      ...config,
      hotReloadPort: actualHotReloadPort,
    });

    // ÌååÏùº Í∞êÏãú ÏãúÏûë
    const fileWatcher = new FileWatcher({
      pagesDir: config.pagesDir,
      apiDir: config.apiDir,
      publicDir: config.publicDir,
      onFileChange: (filePath, changeType) => {
        const ext = path.extname(filePath);

        console.log(
          `üìù File ${changeType}: ${path.relative(process.cwd(), filePath)}`,
        );

        // TypeScript/JSX ÌååÏùº Î≥ÄÍ≤ΩÏãú Ï†ÑÏ≤¥ ÏÉàÎ°úÍ≥†Ïπ®
        if ([".ts", ".tsx", ".js", ".jsx"].includes(ext)) {
          try {
            // Î™®Îìà Ï∫êÏãú ÏÇ≠Ï†ú
            const absolutePath = path.resolve(filePath);
            if (require.cache[absolutePath]) {
              delete require.cache[absolutePath];
              console.log(`üóëÔ∏è  Cleared cache for: ${path.basename(filePath)}`);
            }

            // ÎùºÏö∞Ìä∏ Îã§Ïãú Ïä§Ï∫î
            server.rescanRoutes();

            // Î∏åÎùºÏö∞Ï†Ä ÏÉàÎ°úÍ≥†Ïπ®
            hotReloadServer.reload(`${changeType}: ${path.basename(filePath)}`);
          } catch (error) {
            console.error(`‚ùå Error processing file change:`, error);
            hotReloadServer.reload(`Error: ${error.message}`);
          }
        }

        // CSS ÌååÏùº Î≥ÄÍ≤ΩÏãú CSSÎßå ÏÉàÎ°úÍ≥†Ïπ®
        else if ([".css", ".scss", ".sass"].includes(ext)) {
          hotReloadServer.reloadCSS();
        }

        // Í∏∞ÌÉÄ ÌååÏùº Î≥ÄÍ≤ΩÏãú Ï†ÑÏ≤¥ ÏÉàÎ°úÍ≥†Ïπ®
        else {
          hotReloadServer.reload(`${changeType}: ${path.basename(filePath)}`);
        }
      },
    });

    fileWatcher.start();

    // Í∞úÎ∞úÏö© ÎØ∏Îì§Ïõ®Ïñ¥ Ï∂îÍ∞Ä
    server.use(async (req, res, next) => {
      res.setHeader("X-Powered-By", "Rune UI");
      await next();
    });

    // ÏÑúÎ≤Ñ ÏãúÏûë
    const httpServer = server.start();

    console.log(`‚ú® Server running at http://${config.host}:${config.port}`);
    console.log(`üî• Hot reload on port ${actualHotReloadPort}`);
    console.log("Press Ctrl+C to stop");

    // Ï¢ÖÎ£å Ï≤òÎ¶¨
    const shutdown = async () => {
      console.log("\nüõë Shutting down dev server...");

      try {
        fileWatcher.stop();
        await hotReloadServer.stop();
        server.stop();
        process.exit(0);
      } catch (error) {
        console.error("Error during shutdown:", error);
        process.exit(1);
      }
    };

    process.on("SIGINT", shutdown);
    process.on("SIGTERM", shutdown);

    return { server, httpServer, fileWatcher, hotReloadServer };
  } catch (error) {
    console.error("‚ùå Failed to start development server:", error);
    process.exit(1);
  }
}
